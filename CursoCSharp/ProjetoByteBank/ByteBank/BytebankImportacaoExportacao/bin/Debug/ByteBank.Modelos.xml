<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ByteBank.Modelos</name>
    </assembly>
    <members>
        <member name="T:ByteBank.Modelos.AutenticacaoHelper">
            <summary>
            Classe para auxiliar a autenticação dos Funcionário Autenticáveis
            </summary>
        </member>
        <member name="T:ByteBank.Modelos.Cliente">
            <summary>
            Define um cliente do banco ByteBank
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.Cliente.Nome">
            <summary>
            Nome do Cliente
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.Cliente.CPF">
            <summary>
            CPF do Cliente
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.Cliente.Profissao">
            <summary>
            Profissão do Cliente
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Cliente.Equals(System.Object)">
            <summary>
            Implementação do método Equals do Cliente
            </summary>
            <param name="obj">Objeto a ser comparado</param>
            <returns>Retorna true se forem iguais e false se não forem iguais</returns>
        </member>
        <member name="T:ByteBank.Modelos.ContaCorrente">
            <summary>
            Define uma conta corrente do banco ByteBank
            </summary>
        </member>
        <member name="F:ByteBank.Modelos.ContaCorrente.TaxaOperacao">
            <summary>
            Taxa de Operação da ContaCorrente
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.ContaCorrente.TotalDeContasCriadas">
            <summary>
            Total de contas criadas no banco ByteBank
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.ContaCorrente.Titular">
            <summary>
            Cliente titular da Conta Corrente
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.ContaCorrente.ContadorSaquesNaoPermitidos">
            <summary>
            Conta o número de saques não permitidos na Conta Corrente
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.ContaCorrente.ContadorTransferenciasNaoPermitidas">
            <summary>
            Conta o número de transferências não permitidas na Conta Corrente
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.ContaCorrente.Numero">
            <summary>
            Número da Conta Corrente
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.ContaCorrente.Agencia">
            <summary>
            Número da Agência da Conta Corrente
            </summary>
        </member>
        <member name="F:ByteBank.Modelos.ContaCorrente._saldo">
            <summary>
            Saldo da conta corrente
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.ContaCorrente.Saldo">
            <summary>
            Get e Set do <see cref="F:ByteBank.Modelos.ContaCorrente._saldo"/>
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.ContaCorrente.#ctor(System.Int32,System.Int32)">
            <summary>
            Cria uma Conta Corrente, com os argumentos especificados
            </summary>
            <exception cref="T:System.ArgumentException" > Lançada quando um valor negativo é utilizado em <paramref name="agencia"/> ou em     <paramref name=" numero"/> </exception>
            <param name="agencia">Representa  o valor da propriedade  <see cref="P:ByteBank.Modelos.ContaCorrente.Agencia"/></param>
            <param name="numero">Representa o valor da propriedade <see cref="P:ByteBank.Modelos.ContaCorrente.Numero"/></param>
        </member>
        <member name="M:ByteBank.Modelos.ContaCorrente.Sacar(System.Double)">
            <summary>
            Saca dinheiro da Conta Corrente 
            </summary>
            <exception cref="T:System.ArgumentException"> Lançada quando <paramref name="valor"/> é menor do que 0</exception>
            <exception cref="T:ByteBank.Modelos.SaldoInsuficienteException">Lançada quando <paramref name="valor"/> é maior do que o <see cref="P:ByteBank.Modelos.ContaCorrente.Saldo"/>    </exception>
            <param name="valor">Valor a ser sacado da Conta Corrente</param>
        </member>
        <member name="M:ByteBank.Modelos.ContaCorrente.Depositar(System.Double)">
            <summary>
            Deposita dinheiro na Conta Corrente
            </summary>
            <param name="valor">Valor a ser depositado na Conta Corrente</param>
        </member>
        <member name="M:ByteBank.Modelos.ContaCorrente.Transferir(System.Double,ByteBank.Modelos.ContaCorrente)">
            <summary>
            Transfere dinheiro de uma Conta Corrente para a outra
            </summary>
            <exception cref="T:System.ArgumentException"> Lançada quando <paramref name="valor"/> é menor do que 0</exception>
            <exception cref="T:ByteBank.Modelos.SaldoInsuficienteException">Lançada quando <paramref name="valor"/> é maior do que o <see cref="P:ByteBank.Modelos.ContaCorrente.Saldo"/>    </exception>
            <param name="valor">Valor a ser transferido</param>
            <param name="contaDestino">Conta Corrente a ser depositada o valor</param>
        </member>
        <member name="M:ByteBank.Modelos.ContaCorrente.ToString">
            <summary>
            Implementação do ToString do ContaCorrente
            </summary>
            <returns>Retorna uma String que ilustra a ContaCorrente</returns>
        </member>
        <member name="M:ByteBank.Modelos.ContaCorrente.Equals(System.Object)">
            <summary>
            Implementação do Equal do ContaCorrente
            </summary>
            <param name="obj">ContaCorrente a ser comparada</param>
            <returns></returns>
        </member>
        <member name="M:ByteBank.Modelos.ContaCorrente.CompareTo(System.Object)">
            <summary>
            Implementação do CompareTo, que compara o número das Contas
            -1 -> A Conta Corrente passada por parâmetro é maior
            00 -> As Contas Correntes são iguais
            +1 -> A Conta Corrente passada por parâmetro é menor
            </summary>
            <param name="obj">Conta Corrente a ser comparada</param>
            <returns></returns>
        </member>
        <member name="T:ByteBank.Modelos.Funcionarios.Auxiliar">
            <summary>
             Define um Funcionario Auxiliar do banco ByteBank
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Auxiliar.#ctor(System.String)">
            <summary>
            Cria um novo funcionário a partir dos argumentos utilizados
            </summary>
            <param name="cpf">CPF do Auxiliar</param>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Auxiliar.AumentarSalario">
            <summary>
            Aumenta o salário do Auxiliar
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Auxiliar.GetBonificacao">
            <summary>
            Calcula e retorna o valor da bonificação do Auxiliar
            </summary>
            <returns>Retorna o valor da bonificação</returns>
        </member>
        <member name="T:ByteBank.Modelos.Funcionarios.Desenvolvedor">
            <summary>
            Define um Funcionario Desenvolvedor do banco ByteBank
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Desenvolvedor.#ctor(System.String)">
            <summary>
            Cria um novo Desenvolvedor a partir dos argumentos passados
            </summary>
            <param name="cpf">CPF do Desenvolvedor</param>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Desenvolvedor.AumentarSalario">
            <summary>
            Aumenta o salário de um Desenvolvedor
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Desenvolvedor.GetBonificacao">
            <summary>
            Calcula e retorna a bonificação de um Desenvolvedor
            </summary>
            <returns>Retorna a bonificação</returns>
        </member>
        <member name="T:ByteBank.Modelos.Funcionarios.Designer">
            <summary>
            Define um Funcionário Designer do Banco ByteBank
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Designer.#ctor(System.String)">
            <summary>
            Cria um Designer a partir dos argumentos utilizados
            </summary>
            <param name="cpf">CPF do Designer</param>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Designer.AumentarSalario">
            <summary>
            Aumenta o salário do Designer
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Designer.GetBonificacao">
            <summary>
            Calcula e retorna a bonificação do Designer
            </summary>
            <returns>Retorna a bonificação do Designer</returns>
        </member>
        <member name="T:ByteBank.Modelos.Funcionarios.Funcionario">
            <summary>
            Define um Funcionario do banco ByteBank
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.Funcionarios.Funcionario.TotalDeFuncionarios">
            <summary>
            Número de funcionários do banco ByteBank
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.Funcionarios.Funcionario.Nome">
            <summary>
            Nome do funcionário do banco ByteBank
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.Funcionarios.Funcionario.CPF">
            <summary>
            CPF do funcionário do banco ByteBank
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.Funcionarios.Funcionario.Salario">
            <summary>
            Salario do funcionário do banco ByteBank
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Funcionario.#ctor(System.Double,System.String)">
            <summary>
            Cria um Funcionário do banco ByteBank
            </summary>
            <param name="salario"><see cref="P:ByteBank.Modelos.Funcionarios.Funcionario.Salario"/> do funcionpario</param>
            <param name="cpf"><see cref="P:ByteBank.Modelos.Funcionarios.Funcionario.CPF"/> do funcionario</param>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Funcionario.AumentarSalario">
            <summary>
            Aumenta o salário do Funcionário
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.Funcionario.GetBonificacao">
            <summary>
            Calcula e retorna o salario do Funcionário
            </summary>
            <returns>salario do Funcionário</returns>
        </member>
        <member name="T:ByteBank.Modelos.Funcionarios.FuncionarioAutenticavel">
            <summary>
            Define um Funcionário Autenticável do banco ByteBank
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.Funcionarios.FuncionarioAutenticavel.Senha">
            <summary>
            Senha do Funcionário Autenticável do banco ByteBank
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.FuncionarioAutenticavel.#ctor(System.Double,System.String)">
            <summary>
            Cria um Funcionário Autenticável do banco ByteBank
            </summary>
            <param name="salario">Salario do Funcionário Auteticável</param>
            <param name="cpf">CPF do Funcionário Autenticável</param>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.FuncionarioAutenticavel.Autenticar(System.String)">
            <summary>
            Autentica o Funcionário Autenticável do banco ByteBank
            </summary>
            <param name="senha">Senha a ser comparada com a senha do funcionário</param>
            <returns>Retorna "true" se a senha estiver correta e "false" caso ela esteja errada</returns>
        </member>
        <member name="T:ByteBank.Modelos.Funcionarios.GerenteDeConta">
            <summary>
            Define um Funcionário Gerente de Conta do banco ByteBank
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.GerenteDeConta.#ctor(System.String)">
            <summary>
            Cria um Gerente de Conta do banco ByteBank
            </summary>
            <param name="cpf">CPF do Gerente de Conta</param>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.GerenteDeConta.AumentarSalario">
            <summary>
            Aumenta o salário do Gerente de Conta
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.Funcionarios.GerenteDeConta.GetBonificacao">
            <summary>
            Calcula e retorna a bonificação de um Gerente de Conta
            </summary>
            <returns>Retorna a bonificação</returns>
        </member>
        <member name="T:ByteBank.Modelos.GerenciadorBonificacao">
            <summary>
            Define um gerenciador de bonificações do banco ByteBank
            </summary>
        </member>
        <member name="F:ByteBank.Modelos.GerenciadorBonificacao._totalBonificacao">
            <summary>
            Calcula o valor total de bonificações do banco ByteBank
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.GerenciadorBonificacao.Registrar(ByteBank.Modelos.Funcionarios.Funcionario)">
            <summary>
            Registra a bonificação de um Funcionário do banco ByteBank
            </summary>
            <param name="funcionario"></param>
        </member>
        <member name="M:ByteBank.Modelos.GerenciadorBonificacao.GetTotalBonificacao">
            <summary>
            Retorna o valor de todas as bonificações
            </summary>
            <returns>Retorna <see cref="F:ByteBank.Modelos.GerenciadorBonificacao._totalBonificacao"/></returns>
        </member>
        <member name="T:ByteBank.Modelos.IAutenticavel">
            <summary>
            Interface que define o que as classes Autenticáveis devem implementar
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.IAutenticavel.Autenticar(System.String)">
            <summary>
            Método para verificar se a senha inserida é igual a senha do Objeto
            </summary>
            <param name="senha">Senha tentativa</param>
            <returns></returns>
        </member>
        <member name="T:ByteBank.Modelos.OperacaoFinanceiraException">
            <summary>
            Define uma exceção caso uma operação financeira não seja executada com sucesso
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.OperacaoFinanceiraException.#ctor">
            <summary>
             Cria uma exceção do tipo OperaçãoFinanceiraException
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.OperacaoFinanceiraException.#ctor(System.String)">
            <summary>
            Define a OperacaoFinanceiraException.Message
            </summary>
            <param name="mensagem">Mensagem a ser definida</param>
        </member>
        <member name="M:ByteBank.Modelos.OperacaoFinanceiraException.#ctor(System.String,System.Exception)">
            <summary>
            Define a OperacaoFinanceiraException.Message e sua innerException
            </summary>
            <param name="mensagem">Mensagem a ser definida</param>
            <param name="excecaoInterna">Inner exception</param>
        </member>
        <member name="T:ByteBank.Modelos.ParceiroComercial">
            <summary>
            Define um ParceiroComercial do banco ByteBank
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.ParceiroComercial.Senha">
            <summary>
            Senha do Parceiro Comercial
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.ParceiroComercial.Autenticar(System.String)">
            <summary>
            Verifica se a senha inserida é igual a senha do Parceiro Comercial
            </summary>
            <param name="senha">Senha a ser verificada</param>
            <returns></returns>
        </member>
        <member name="T:ByteBank.Modelos.SaldoInsuficienteException">
            <summary>
            Define uma exceção do caso o saldo para realizar a operação seja insuficiente
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.SaldoInsuficienteException.Saldo">
            <summary>
            Saldo da Conta Corrente em que ocorreu essa exceção
            </summary>
        </member>
        <member name="P:ByteBank.Modelos.SaldoInsuficienteException.ValorSaque">
            <summary>
            Valor da tentativa do saque
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.SaldoInsuficienteException.#ctor">
            <summary>
            Cria uma execeção do tipo SaldoInsuficienteException
            </summary>
        </member>
        <member name="M:ByteBank.Modelos.SaldoInsuficienteException.#ctor(System.Double,System.Double)">
            <summary>
            Cria uma exceção do tipo SaldoInsuficienteException com os argumentos utilizados
            </summary>
            <param name="saldo"> <see cref="P:ByteBank.Modelos.SaldoInsuficienteException.Saldo"/> da Conta Corrente</param>
            <param name="valorSaque"><see cref="P:ByteBank.Modelos.SaldoInsuficienteException.ValorSaque"/>que tentaram realizar</param>
        </member>
        <member name="M:ByteBank.Modelos.SaldoInsuficienteException.#ctor(System.String)">
            <summary>
            Define a SaldoInsuficienteException.Message
            </summary>
            <param name="mensagem">Mensagem a ser definida</param>
        </member>
        <member name="M:ByteBank.Modelos.SaldoInsuficienteException.#ctor(System.String,System.Exception)">
            <summary>
            Define a SaldoInsuficienteException.Message e sua inner Exception
            </summary>
            <param name="mensagem"> Mensagem a ser definida</param>
            <param name="excecaoInterna">Inner Exception</param>
        </member>
    </members>
</doc>
